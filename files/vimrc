set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
"
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
"
" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
"
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}
"
Plugin 'majutsushi/tagbar'
Plugin 'scrooloose/nerdtree'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'easymotion/vim-easymotion'

Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

Plugin 'mileszs/ack.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-airline/vim-airline'
Plugin 'sjl/gundo.vim'

Plugin 'elixir-lang/vim-elixir'

" All of your Plugins must be added before the following line
call vundle#end()            " required
" filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line


" Syntax Highlighting
syntax on

" Highlight matches of search
set hlsearch
" search while typing
set incsearch

" highlight last inserted text
nnoremap gV `[v`]

" search in subfolders
" works with tab-completion
set path+=**

" visual autocomplete for command menu
set wildmenu

" check last line of file for a modline
" used for this file to fold sections
set modelines=1

" gvim, eye-candy
set background=dark
colorscheme desert

" gvim, no toolbar
set guioptions-=T

" split layout
set splitright

" jump to first open window that contains buffer
set switchbuf+=useopen,vsplit

" switch between window splits
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

nmap <silent> <C-w>k :wincmd k<CR>
nmap <silent> <C-w>j :wincmd j<CR>
nmap <silent> <C-w>h :wincmd h<CR>
nmap <silent> <C-w>l :wincmd l<CR>

" resize window
map <C-S-DOWN> <C-w>+
map <C-S-UP> <C-w>-
map <C-S-LEFT> <C-w><
map <C-S-RIGHT> <C-w>>


" Omni
set omnifunc=syntaxcomplete#Complete

" Omni-Python
autocmd FileType python setlocal omnifunc=python3complete#Complete

" Omni-Ruby
autocmd FileType ruby,eruby setlocal omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1 
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1


"
" PLUGINS
" 

" YouCompleteMe
let g:ycm_python_binary_path = 'python3'
let g:ycm_collect_identifiers_from_tags_files = 1


" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0


" tagbar
" run `dpkg -L exuberant-ctags`
let g:tagbar_ctags_bin = '/usr/bin/ctags-exuberant'
let g:tagbar_left = 0


" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_python_checkers = ['pylint']


" UltiSnips
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


"
" LANGUAGES
"
filetype indent on

" Makefile
autocmd BufEnter Makefile setlocal noexpandtab

" RUBY
autocmd FileType ruby compiler ruby
autocmd FileType ruby setlocal tabstop=2
autocmd FileType ruby setlocal shiftwidth=2
autocmd FileType ruby setlocal softtabstop=2
autocmd FileType ruby setlocal expandtab

" PYTHON
" Format PEP-8
autocmd FileType python setlocal tabstop=4
autocmd FileType python setlocal shiftwidth=4
autocmd FileType python setlocal softtabstop=4
autocmd FileType python setlocal expandtab

" C++
autocmd FileType cpp setlocal tabstop=4


"
" KEY MAPPINGS - leader
"

" the \ is too far away for a leader key
let mapleader=","

" the <esc> is too far away
inoremap aa <esc>

" 1 key

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" open Ack.vim
nnoremap <leader>a :Ack! 

" buffers, including unlisted
nnoremap <leader>b :buffers!<CR>

" toggle QuickFix
nnoremap <leader>c :cw<CR>

" help
nnoremap <leader>h :help 

" make
nnoremap <leader>m :make! 

" toggle NerdTree
nnoremap <leader>n :NERDTreeToggle<CR>

" switcher
nnoremap <leader>s :CtrlPBuffer<CR>

" toggle tagbar
nnoremap <leader>t :TagbarOpenAutoClose<CR>

" toggle gundo
nnoremap <leader>u :GundoToggle<CR>


" 2 keys

" open, close tool windows
" quickfix
nnoremap <leader>co :copen<CR>
nnoremap <leader>cc :cclose<CR>
nnoremap <leader>cn :cnext<CR>
nnoremap <leader>cp :cprevious<CR>

" location list
nnoremap <leader>lo :lopen<CR>
nnoremap <leader>lc :lclose<CR>
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprevious<CR>

" help
nnoremap <leader>hc :helpclose<CR>

nnoremap <leader>dj :YcmCompleter GoToDefinition<CR> 
nnoremap <leader>dcj :YcmCompleter GoToDeclaration<CR> 

" manage .vimrc
nnoremap <leader>vo :vsp $HOME/workspace/devops-my-ubuntu/files/vimrc<CR>
nnoremap <leader>vd :!ansible_playbook_run_tag_local vimrc<CR>
nnoremap <leader>vs :source $MYVIMRC<CR>


"
" KEY MAPPINGS - IntelliJ {{{
"
nnoremap <C-S> :w<CR>
nnoremap <C-Q> :wq<CR>

" Edit
nnoremap <c-d> m`:silent +g/\m^\s*$/d<CR>``:noh<CR>
nnoremap <c-s-d> m`:silent -g/\m^\s*$/d<CR>``:noh<CR>
nnoremap <c-y> :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <c-s-y> :set paste<CR>m`O<Esc>``:set nopaste<CR>

" TagBar
nnoremap <A-7> :TagbarToggle<CR>

" UltiSnips
let g:UltiSnipsExpandTrigger="<C-J>"

" NerdTree
nnoremap <A-1> :NERDTreeToggle<CR>

" YouCompleteMe
nnoremap <c-b> :YcmCompleter GoTo<CR> 
nnoremap <c-s-b> :YcmCompleter GoToDefinition<CR> 
nnoremap <c-a-b> :YcmCompleter GoToDeclaration<CR> 
nnoremap <c-s-7> :YcmCompleter GoToReferences<CR> 
nnoremap <c-q> :YcmCompleter GetDoc<CR> 

augroup keymap_intellij
autocmd!

" PYTHON
autocmd FileType python nnoremap <S-F10> :!python3 -m doctest %<CR>
autocmd FileType python nnoremap <S-A-F10> :!nosetests %<CR>

" ELIXIR
autocmd BufRead *.ex nnoremap <S-F10> :!elixir %<CR>
autocmd BufRead *.exs nnoremap <S-F10> :!elixir %<CR>

" PHP
autocmd FileType php nnoremap <S-F10> :!php %<CR>

" CPP
autocmd FileType cpp nnoremap <C-F9> :make<CR>
autocmd FileType cpp nnoremap <C-S-F9> :make %<CR>

augroup END

" }}}

" vim:foldmethod=marker:foldlevel=0
