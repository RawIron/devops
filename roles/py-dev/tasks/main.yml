---

- name: update apt cache
  apt: update_cache=yes

- name: install py-dev linux packages
  apt: name={{ item }} state=latest
  with_items:
   - python-virtualenv
   - python-pip
   - python-dev
   - python-pygments
   - virtualenvwrapper


# temp hack as long as ssh key is not provisioned
# test if ssh key is available
# in case it is missing create dummy directories
- name: test ssh key exists
  command: test -f {{ user_home }}/.ssh/id_rsa
  register: result
  ignore_errors: True

- name: clone git repos
  git:
    repo: ssh://git@github.com/RawIron/{{ item }}.git
    dest: "{{ project_home }}/{{ item }}"
  with_items: "{{ pydev_repos }}"
  become_user: "{{ user }}"
  when: result|success

- name: create directory with empty requirements file
  file:
    path: "{{ project_home }}/{{ item }}/requirements.txt"
    state: touch
  with_items: "{{ pydev_repos }}"
  become_user: "{{ user }}"
  when: result|failed


# foreach python git repo create the venv with the same name
- name: create one venv foreach pydev repo
  shell: source /home/{{ user }}/.zshrc; mkvirtualenv {{ item }}
         executable=/usr/bin/zsh
  with_items: "{{ pydev_repos }}"
  become_user: "{{ user }}"
  become_method: sudo

- name: bind venv to projects
  shell: source /home/{{ user }}/.zshrc; \
         setvirtualenvproject {{ venv_home }}/{{ item }} {{ project_home }}/{{ item }}
         executable=/usr/bin/zsh
  with_items: "{{ pydev_repos }}"
  become_user: "{{ user }}"
  become_method: sudo

# project must have a requirements.txt
# `pip` has no option to ignore a missing requirements.txt
# when-condition is tricky for this one:
#   would need the `stat` module to check if file exists
#   store the result with `register`
#   how to do this in a loop?
- name: install required packages into each pydev repo
  pip: requirements={{ project_home }}/{{ item }}/requirements.txt
       virtualenv={{ venv_home }}/{{ item }}
       state=latest
  with_items: "{{ pydev_repos }}"
  become_user: "{{ user }}"
  become_method: sudo
