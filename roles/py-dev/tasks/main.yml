---

- name: update apt cache
  apt:
    update_cache: yes

- name: install py-dev linux packages
  apt:
    state: latest
    name:
     - python3-venv
     - python3-pip
     - python3-dev
     - python3-pygments


# temp hack as long as ssh key is not provisioned
# test if ssh key is available
# in case it is missing create dummy directories
- name: test ssh key exists
  command: test -f {{ git_ssh_key_file }}
  ignore_errors: True
  register: result
  become_user: "{{ user }}"
  become_method: sudo

- name: clone git repos
  git:
    repo: "{{ git_ssh }}/{{ git_user }}/{{ item }}.git"
    dest: "{{ project_home }}/{{ item }}"
  with_items: "{{ git_pyrepos }}"
  when: result is success
  become_user: "{{ user }}"
  become_method: sudo

- name: create directory
  file:
    path: "{{ project_home }}/{{ item }}"
    state: directory
  with_items: "{{ git_pyrepos }}"
  when: result is failed
  become_user: "{{ user }}"
  become_method: sudo

- name: create empty requirements file
  file:
    path: "{{ project_home }}/{{ item }}/requirements.txt"
    state: touch
  with_items: "{{ git_pyrepos }}"
  when: result is failed
  become_user: "{{ user }}"
  become_method: sudo


# foreach python git repo create the venv with the same name
- name: create venv in projects
  shell: python3 -m venv {{ project_home }}/{{ item }}/{{ venv_home }}
  with_items: "{{ git_pyrepos }}"
  become_user: "{{ user }}"
  become_method: sudo

# project must have a requirements.txt
# `pip` has no option to ignore a missing requirements.txt
# when-condition is tricky for this one:
#   would need the `stat` module to check if file exists
#   store the result with `register`
#   how to do this in a loop?
- name: install required packages into each pyrepo
  pip:
    requirements: "{{ project_home }}/{{ item }}/requirements.txt"
    virtualenv: "{{ project_home }}/{{ item }}/{{ venv_home }}"
    state: latest
  with_items: "{{ git_pyrepos }}"
  become_user: "{{ user }}"
  become_method: sudo
